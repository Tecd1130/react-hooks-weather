{"version":3,"sources":["components/CitySelector.tsx","components/Forecast.tsx","components/Description.tsx","components/Forecasts.tsx","App.tsx","index.tsx"],"names":["areas","Wrapepr","styled","div","AreaSelect","select","PrefectureSelect","CityList","ul","CityItem","li","Link","a","CitySelector","props","useState","selectedAreaName","setSelectedAreaName","selectedPrefectureName","setSelectedPrefectureName","selectedArea","find","area","name","prefectures","selectedPrefecture","pref","cities","defaultValue","onChange","e","target","value","map","key","city","code","href","onClick","cityCode","preventDefault","onCityChange","handleCityLinkClick","Wrapper","DateLabel","Telop","Date","Image","img","Temperature","Min","span","Infix","Max","Forcast","dateLabel","telop","date","src","imageUrl","alt","imageAlt","minTemperature","maxTemperature","Title","Text","Description","title","text","Forecasts","forcasts","setForcasts","description","setDescription","useEffect","url","fetch","then","res","json","newForcasts","forecasts","f","temperature","min","celsius","max","image","extractForcasts","newDescription","extractDescription","catch","error","console","App","setCityCode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c093b599.chunk.js","sourcesContent":["import React, { FunctionComponent, useState } from \"react\";\nimport styled from \"styled-components\";\nimport citiesJson from \"./cities.json\";\n\ntype City = {\n  code: string;\n  name: string;\n}\ntype Prefecture = {\n  name: string;\n  cities: City[];\n}\ntype Area = {\n  name: string;\n  prefectures: Prefecture[];\n}\nconst areas: Area[] = citiesJson.areas;\n\nconst Wrapepr = styled.div`\n  padding: 10px;\n  width: 200px;\n  text-align: center;\n  float: left;\n`\n\nconst AreaSelect = styled.select`\n  height: 25px;\n  width: 150px;\n  margin-bottom: 10px;\n`\n\nconst PrefectureSelect = styled.select`\n  height: 25px;\n  width: 150px;\n  margin-bottom: 10px;\n`\n\nconst CityList = styled.ul`\n  text-align: left;\n`\n\nconst CityItem = styled.li`\n`\n\nconst Link = styled.a`\n  &:link, :visited, :hover, :active {\n    color: blue;\n  }\n`\n\ntype CitySelectorProps = {\n  onCityChange: (cityCode: string) => void;\n}\n\nexport const CitySelector: FunctionComponent<CitySelectorProps> = (props) => {\n  const [selectedAreaName, setSelectedAreaName] = useState(\"\");\n  const [selectedPrefectureName, setSelectedPrefectureName] = useState(\"\");\n  const selectedArea = areas.find((area) => area.name === selectedAreaName);\n  const prefectures = selectedArea ? selectedArea.prefectures : [];\n  const selectedPrefecture = prefectures.find((pref) => pref.name === selectedPrefectureName);\n  const cities = selectedPrefecture ? selectedPrefecture.cities : [];\n\n  const handleAreaChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedAreaName(e.target.value);\n  }\n  const handlePrefectureChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedPrefectureName(e.target.value);\n  }\n  const handleCityLinkClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>, cityCode: string) => {\n    e.preventDefault();\n    props.onCityChange(cityCode);\n  }\n\n  return (\n    <Wrapepr>\n      <AreaSelect defaultValue={selectedAreaName} onChange={handleAreaChange}>\n        <option value=\"\">--地域を選択--</option>\n        {areas.map((area) => {\n          return <option key={area.name} value={area.name} >{area.name}</option>\n        })}\n      </AreaSelect>\n      <PrefectureSelect defaultValue={selectedPrefectureName} onChange={handlePrefectureChange}>\n        <option value=\"\">--県を選択--</option>\n        {prefectures.map((pref) => {\n          return <option key={pref.name} value={pref.name} >{pref.name}</option>\n        })}\n      </PrefectureSelect>\n      <CityList>\n        {cities.map((city) => {\n          return (\n            <CityItem key={city.code}>\n              <Link href=\"#\" onClick={(e) => handleCityLinkClick(e, city.code)}>\n                {city.name}\n              </Link>\n            </CityItem>\n          );\n        })}\n      </CityList>\n    </Wrapepr>\n  );\n}","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\n\nexport type ForecastProps = {\n  dateLabel: string;\n  telop: string;\n  date: string;\n  minTemperature?: string;\n  maxTemperature?: string;\n  imageUrl: string;\n  imageAlt?: string;\n}\n\nconst Wrapper = styled.div`\n  width: 150px;\n  margin-top: 10px;\n  margin-right: 10px;\n  padding: 3px;\n  font-size: 1em;\n  border: solid 1px lightsteelblue;\n  text-align: center;\n  float: left;\n`\n\nconst DateLabel = styled.div`\n  font-size: 1.2em;\n  line-height: 1.5em;\n  margin-top: 2px;\n  background-color: royalblue; \n  color: #fff;\n`\n\nconst Telop = styled.div`\n  line-height: 1.2em;\n  margin-top: 2px;\n`\n\nconst Date = styled.div`\n  line-height: 1.2em;\n  margin: 2px auto;\n`\n\nconst Image = styled.img`\n  height: 50px;\n  margin: 2px auto;\n`\n\nconst Temperature = styled.div`\n  padding: 2px;\n`\n\nconst Min = styled.span`\n  font-size: 1.8em;\n  line-height: 1.9em;\n  color: blue;\n`\n\nconst Infix = styled.span`\n  font-size: 1.8em;\n  line-height: 1.9em;\n`\n\nconst Max = styled.span`\n  font-size: 1.8em;\n  line-height: 1.9em;\n  color: red;\n`\n\nexport const Forcast: FunctionComponent<ForecastProps> = (props) => {\n  return (\n    <Wrapper>\n      <DateLabel>{props.dateLabel}</DateLabel>\n      <Telop>{props.telop}</Telop>\n      <Date>{props.date}</Date>\n      <Image src={props.imageUrl} alt={props.imageAlt} />\n      <Temperature>\n        <Min>{props.minTemperature || \"-\"}</Min>\n        <Infix>{\"/\"}</Infix>\n        <Max>{props.maxTemperature || \"-\"}</Max>\n      </Temperature>\n    </Wrapper>\n  );\n}\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\n\nexport type DescriptionProps = {\n  title: string;\n  text: string;\n}\n\nconst Wrapper = styled.div`\n  width: 400px;\n  margin-top: 10px;\n  margin-right: 10px;\n  padding: 3px;\n  font-size: 1em;\n  border: solid 1px lightsteelblue;\n  text-align: center;\n  float: left;\n`\n\nconst Title = styled.div`\n  font-size: 1.2em;\n  line-height: 1.5em;\n  margin-top: 2px;\n  background-color: royalblue; \n  color: #fff;\n`\n\nconst Text = styled.div`\n  padding: 3px;\n  height: 300px;\n  overflow: auto;\n`\n\nexport const Description: FunctionComponent<DescriptionProps> = (props) => {\n  return (\n    <Wrapper>\n      <Title>{props.title}</Title>\n      <Text>{props.text}</Text>\n    </Wrapper>\n  )\n}","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport { Forcast, ForecastProps } from './Forecast';\nimport { Description, DescriptionProps } from './Description';\n\ntype ForecastsProps = {\n  cityCode: string;\n}\n\n/* 以下のようなJSONからデータを抽出する\nforecasts:[\n  0:{\n    dateLabel:今日\n    telop:雨のち曇\n    date:2020-06-14\n    temperature:{\n      min:null\n      max:{\n        celsius:27\n        fahrenheit:80.6\n      }\n    }\n    image:{\n      width:50\n      url:http://weather.livedoor.com/img/icon/20.gif\n      title:雨のち曇\n      height:31\n    }\n  }\n  1:{\n*/\nconst extractForcasts = (json: any) => {\n  const forecasts: any[] = json.forecasts;\n  return forecasts.map((f: any) => {\n    return {\n      dateLabel: f.dateLabel,\n      telop: f.telop,\n      date: f.date,\n      minTemperature: f.temperature.min ? f.temperature.min.celsius : null,\n      maxTemperature: f.temperature.max ? f.temperature.max.celsius : null,\n      imageUrl: f.image.url,\n      imageAlt: f.image.title\n    };\n  });\n}\n\nconst extractDescription = (json: any) => {\n  return {\n    title: json.title,\n    text: json.description.text\n  };\n}\n\nconst getFetchUrl = (cityCode: string) => {\n  let baseUrl: string;\n  if (process.env.NODE_ENV === 'production') {\n    baseUrl = \"http://weather.livedoor.com\";\n  } else {\n    baseUrl = \"/api\";\n  }\n  const url = `${baseUrl}/forecast/webservice/json/v1?city=${cityCode}`;\n  return url;\n}\n\nexport const Forecasts: FunctionComponent<ForecastsProps> = (props) => {\n  const [forcasts, setForcasts] = useState<ForecastProps[]>([]);\n  const [description, setDescription] = useState<DescriptionProps>();\n\n  useEffect(() => {\n    if (props.cityCode) {\n      const url = getFetchUrl(props.cityCode);\n      fetch(url)\n        .then((res) => {\n          return res.json();\n        })\n        .then((json) => {\n          const newForcasts: ForecastProps[] = extractForcasts(json);\n          setForcasts(newForcasts);\n          const newDescription: DescriptionProps = extractDescription(json);\n          setDescription(newDescription);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  }, [props.cityCode]);\n\n  return (\n    <>\n      {description && <Description {...description} />}\n      {forcasts.map((f) => {\n        return <Forcast key={f.date} {...f} />\n      })}\n    </>\n  );\n}","import React, { useState } from 'react';\nimport { CitySelector } from './components/CitySelector';\nimport { Forecasts } from './components/Forecasts';\n\nfunction App() {\n  const [cityCode, setCityCode] = useState(\"\");\n  const handleCityChange = (cityCode: string) => {\n    setCityCode(cityCode);\n  }\n\n  return (\n    <div>\n      <CitySelector onCityChange={handleCityChange} />\n      <Forecasts cityCode={cityCode} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n"],"sourceRoot":""}